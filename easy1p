#!/usr/bin/env bash
set -euo pipefail

# check to see if all dependencies are satisfied
function check_dependencies() {
    for dep in "op" "jq"; do
        if [[ ! $(command -v "$dep") ]]; then
            echo "Unable to find '$dep' command. Please make sure it is installed and part of the path variable."
            exit 1
        fi
    done
}

# print versions
function print_versions() {
    echo "easy-1password-cli 0.1"
    echo -n "1password-cli "
    op --version
    echo -n "jq "
    jq --version
}

# print help text
function print_help() {
    echo "TODO"
}

# check for 1password-cli to be set up
function check_for_op_setup() {
    if test -f ~/.op/config; then
        OP_LATEST_SIGNIN=$(cat ~/.op/config | jq --raw-output '.latest_signin')
    else
        echo "1password-cli is not set up yet. Please run 'op signin' to set it up."
    fi
}

# sign in to 1password
function signin() {
    eval $(op signin $1)
}

# sign out of 1password
function signout() {
    op signout --account $1
    unset "OP_SESSION_$1"
    exit 0
}

# prompt users for command with
function prompt_for_command() {
    read -p "> $op_account: " command
    if [[ -z $command ]]; then
        prompt_for_command
    fi
    echo $command
}

# core lifecycle logic
function core_lifecycle() {
    check_for_op_setup

    # pick an account to sign in
    OP_ACCOUNT=${1:-$OP_LATEST_SIGNIN}
    echo "Using '${OP_ACCOUNT}' account to sign in."

    signin $OP_ACCOUNT
    signout $OP_ACCOUNT
}

# entry point
function main() {
    check_dependencies

    # check for version and help flags
    if [[ $# -eq 1 ]]; then
        if [[ "$1" =~ ^(--?)([vV]([eE][rR][sS][iI][oO][nN])?)$ ]]; then
            print_versions
            exit 0
        fi

        if [[ "$1" =~ ^(--?)([hH]([eE][lL][pP])?)$ ]]; then
            print_help
            exit 0
        fi
    fi

    # begin core lifecycle
    core_lifecycle $*
}

# start script
main $*

# TODO Ctrl+c Ctrl+z SIGINT catching
# TODO Clean env variables
# TODO Auto signout
# TODO Clipboard management
# TODO Clipboard clear after time
# TODO Clipboard cleanup
# TODO consider encrypting ~/.op/config with master password
# TODO check ~/.op/config to make sure op is setup
# TODO standard 1password-cli flags to specify subdomain, accounts, vaults, etc
# TODO session token check if needs to be renewed
